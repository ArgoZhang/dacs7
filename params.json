{
  "name": "dacs7",
  "tagline": "dnx app for s7 plc connection",
  "body": "# dacs7\r\n\r\nData access S7 is a library to connect to S7 plcs for reading and writing data.\r\n\r\n<!-- TOC -->\r\n\r\n- [dacs7](#dacs7)\r\n- [NuGet](#nuget)\r\n- [Description](#description)\r\n- [Sample-Code](#sample-code)\r\n\t- [Principial Usage:](#principial-usage)\r\n\t- [Generic Sample:](#generic-sample)\r\n\t- [Read/Write multiple variables in one call:](#readwrite-multiple-variables-in-one-call)\r\n- [Release Notes](#release-notes)\r\n\r\n<!-- /TOC -->\r\n\r\n\r\n# NuGet\r\n    PM>  Install-Package Dacs7\r\n\r\n# Description\r\n\r\n\r\nDacs7 is used to connect to a SIEMENS Plc by using the RFC1006 protocol to perform operations.\r\n\r\n# Sample-Code\r\n\r\n\r\n## Principial Usage:\r\n\r\n```cs\r\nvar connectionString = \"Data Source=128.0.0.1:102,0,2\";\r\nvar client = new Dacs7Client();\r\n\r\nclient.Connect(connectionString);\r\n\r\nvar length = 500;\r\nvar testData = new byte[length];\r\nvar offset = 0;\r\nvar dbNumber = 560;\r\n\r\n_client.WriteAny(PlcArea.DB, offset, testData, new[] { length, dbNumber });\r\n\r\nvar red = _client.ReadAny(PlcArea.DB, offset, typeof(byte), new[] { length, dbNumber }) as byte[];\r\n\r\nclient.Disconnect();\r\n```\r\n\r\n\r\n## Generic Sample:\r\n\r\n```cs\r\npublic static void GenericsSample()\r\n{\r\n    var boolValue = _client.ReadAny<bool>(TestDbNr, TestBitOffset);\r\n    var intValue = _client.ReadAny<int>(TestDbNr, TestByteOffset);\r\n\r\n    const int numberOfArrayElements = 2;\r\n    var boolEnumValue = _client.ReadAny<bool>(TestDbNr, TestBitOffset, numberOfArrayElements);\r\n    var intEnumValue = _client.ReadAny<int>(TestDbNr, TestByteOffset, numberOfArrayElements);\r\n}\r\n```\r\n\r\n## Read/Write multiple variables in one call:\r\n\r\n```cs\r\npublic static void MultiValuesSample()\r\n{\r\n    var operations = new List<ReadOperationParameter>\r\n    {\r\n        new ReadOperationParameter{Area = PlcArea.DB, Offset= TestByteOffset, \r\n                                   Type=typeof(byte), Args = new int[]{1, TestDbNr}},\r\n        new ReadOperationParameter{Area = PlcArea.DB, Offset= TestBitOffset, \r\n                                  Type=typeof(bool), Args = new int[]{1, TestDbNr}}\r\n    };\r\n\r\n    var result = _client.ReadAny(operations); //result is IEnumerable<byte[]>\r\n\r\n    var writeOperations = new List<WriteOperationParameter>\r\n    {\r\n        new WriteOperationParameter{Area = PlcArea.DB, Offset= TestByteOffset, \r\n                                    Type=typeof(byte), Args = new int[]{1, TestDbNr}, Data = (byte)0x05},\r\n        new WriteOperationParameter{Area = PlcArea.DB, Offset= TestBitOffset, \r\n                                    Type=typeof(bool), Args = new int[]{1, TestDbNr}, Data = true}\r\n    };\r\n\r\n    _client.WriteAny(writeOperations);\r\n\r\n}\r\n```\r\n\r\n\r\n# Release Notes\r\n* 1.0.5:\r\n    * fix a bug in generic read methods when reading bits.\r\n* 1.0.4:  \r\n    * change ReadAny results from object to byte[] and add some generic methods for ReadAny.\r\n    * implement ReadAny and Write any for multible variables in one call job. (for now there is no automatic splitting        \r\n     implemented if the size of the pdu is to large. To large pdu's result in an Dacs7ToMuchDataPerCallException )\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}